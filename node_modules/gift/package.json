{
  "name": "gift",
  "version": "0.0.5",
  "description": "a Git wrapper library",
  "keywords": [
    "git"
  ],
  "homepage": "https://github.com/sentientwaffle/gift",
  "bugs": {
    "url": "https://github.com/sentientwaffle/gift/issues"
  },
  "author": {
    "name": "sentientwaffle",
    "url": "http://sentientwaffle.github.com/"
  },
  "main": "./lib/index",
  "scripts": {
    "test": "mocha",
    "prepublish": "coffee -o lib -c src"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sentientwaffle/gift.git"
  },
  "dependencies": {
    "underscore": "1.x.x"
  },
  "devDependencies": {
    "should": "0.4.x",
    "mocha": "0.x.x",
    "coffee-script": "1.1.x"
  },
  "engines": {
    "node": "> 0.4.1"
  },
  "readme": "# Gift\n\n[![Build Status](https://secure.travis-ci.org/sentientwaffle/gift.png?branch=master)](http://travis-ci.org/sentientwaffle/gift)\n\nA simple Node.js wrapper for the Git CLI. The API is based on\n[Grit](https://github.com/mojombo/grit)\n\n# Installation\n\n    $ npm install gift\n\n# API\n\n    git  = require 'gift'\n    \n    repo = git \"path/to/repo\"\n    # => #<Repo>\n\n## Repo\n### `Repo#path`\n`String` - The path to the repository.\n\n### `Repo#commits([treeish, [limit, [skip, ]]]callback)`\nGet a list of commits.\n\n  * `treeish`  - `String`  (optional).\n  * `limit`    - `Integer` (optional).\n  * `skip`     - `Integer` (optional).\n  * `callback` - `Function` which receives `(err, commits)`, where `commits` is\n                 an `Array` of `Commit`s.\n\nGet the 10 most recent commits to master.\n\n    repo.commits (err, commits) ->\n\nOr to a different tag or branch.\n\n    repo.commits \"v0.0.3\", (err, commits) ->\n\nLimit the maximum number of commits returned.\n\n    repo.commits \"master\", 30, (err, commits) ->\n\nSkip some (for pagination):\n\n    repo.commits \"master\", 30, 30, (err, commits) ->\n\n### `Repo#tree([treeish]) => Tree`\nThe `Tree` object for the treeish (which defaults to \"master\").\n\n    repo.tree().contents (err, children) ->\n      for child in children\n        console.log child.name\n\n### `Repo#diff(commitA, commitB, [paths, ]callback)`\nGet the difference between the trees.\n\nThe callback receives `(err, diffs)`.\n\n### `Repo#remotes(callback)`\nGet the repository's remotes.\n\nReceives `(err, remotes)`, where each remote is a Ref.\n\n### `Repo#remote_list(callback)`\nGet a list of the repository's remote names.\n\nGet the string names of each of the remotes.\n\n### `Repo#remote_add(name, url, callback)`\nEquivalent to `git remote add <name> <url>`.\n\n### `Repo#remote_fetch(name, callback)`\n`git fetch <name>`\n\n\n### `Repo#status(callback)`\nThe callback receives `(err, status)`.\n\n### `Repo#create_branch(name, callback)`\nCreate a new branch with `name`, and call the callback when complete\nwith an error, if one occurred.\n\n### `Repo#delete_branch(name, callback)`\nDelete the branch `name`, and call the callback with an error, if one occurred.\n\n### `Repo#tags(callback)`\nGet a list of `Tag`s.\n\n### `Repo#create_tag(name, [options, ]callback)`\nCreate a tab with the given name.\n\n### `Repo#delete_tag(name, callback)`\nDelete the tag with the given name.\n\n### `Repo#branches(callback)`\n`callback` receives `(err, heads)`.\n\n### `Repo#create_branch(name, callback)`\nCreate a branch with the given name.\n\n### `Repo#delete_branch(delete, callback)`\nDelete the branch with the given name.\n\n### `Repo#branch([branch, ]callback)`\nGet a branch.\n\n  * `branch`   - The name of the branch to get. Defaults to the\n                 currently checked out branch.\n  * `callback` - Receives `(err, head)`.\n\n\n### `Repo#commit(message, [options, ]callback)`\nCommit some changes.\n\n  * `message`  - `String`\n  * `options`  -\n    - `all`    - `Boolean`\n    - `amend`  - `Boolean`\n  * `callback` - Receives `(err)`.\n\n### `Repo#add(files, callback)`\n`git add <files>`\n\n### `Repo#remove(files, callback)`\n`git rm <files>`\n\n### `Repo#checkout(treeish, callback)`\n`git checkout <treeish>`\n\n## Commit\n### `Commit#id`\n`String` - The commit's SHA.\n\n### `Commit#parents`\n`Commit[]`\n\n### `Commit#tree(callback)`\n\n  * `callback` - Receives `(err, tree)`.\n\n### `Commit#author`\n`Actor`\n### `Commit#authored_date`\n`Date`\n### `Commit#committer`\n`Actor`\n### `Commit#committed_date`\n`Date`\n### `Commit#message`\n`String`\n\n\n## Head\n### `Head#name`\n`String`\n\n### `Head#commit`\n`Commit`\n\n## Tag\n### `Tag#name`\n`String`\n\n### `Tag#commit`\n`Commit`\n\n### `Tag#message(callback)`\nThe callback receives `(err, message)` (`message` is a String).\n\n### `Tag#tagger(callback)`\nThe callback receives `(err, actor)`.\n\n### `Tag#tag_date(callback)`\nThe callback receives `(err, date)`.\n\n## Status\n### `Status#clean`\n`Boolean`\n\n### `Status#files`\n`Object` - The keys are files, the values objects indicating whether or not\nthe file is staged, tracked, etc.\n\nEach file has the following properties:\n\n  * `type`    - \"A\" for added, \"M\" for modified, \"D\" for deleted.\n  * `staged`  - `Boolean`\n  * `tracked` - `Boolean`\n\n## Actor\n### `Actor#name`\n`String`\n\n### `Actor#email`\n`String`\n\n### `Actor#hash`\n`String` - The MD5 hash of the actor's email. Useful for displaying\n[Gravatar](http://en.gravatar.com/) avatars.\n\n\n## Tree\n### `Tree#id`\n`String` - SHA1\n\n### `Tree#contents(callback)`\n\n  * `callback` - Receives `(err, children)`.\n  * `children` - An array of `Blob`s, `Tree`s, and `Submodule`s.\n\n### `Tree#blobs(callback)`\n\n  * `callback` - Receives `(err, child_blobs)`.\n  * `children` - `[Blob]`\n\n### `Tree#trees(callback)`\n\n  * `callback` - Receives `(err, child_trees)`.\n  * `children` - `[Tree]`\n\n### `Tree#find(directory, callback)`\n\n  * `directory` - `String`\n  * `callback`  - Receives `(err, thing)`.\n\n## Blob\n### `Blob#id`\n`String` - SHA1\n\n### `Blob#mode`\n`String`\n\n### `Blob#data(callback)`\n\n  * `callback` - `(err, data)`\n\n## Submodule\n### `Submodule#id`\n`String`\n\n### `Submodule#name`\n`String`\n\n### `Submodule#mode`\n`String`\n\n### `Submodule#url(callback)`\nGet the url the submodule points to.\n\n\n# License\nSee LICENSE.\n\n\n",
  "_id": "gift@0.0.5",
  "dist": {
    "shasum": "bc51ad7f587ad8b92a5335bd9b457851ab6e38c6"
  },
  "_from": "gift"
}
